<% if Rails.env.development? %>
fbKey = 762893740391021
<% elsif Rails.env.test? %>
fbKey = 762893740391021
<% elsif Rails.env.production? %>
fbKey = 683432475029309
<% end %>

redirectUri = "http://dossier-app.herokuapp.com/auth/facebook/callback"

# getFacebookEvents = ->
#   FB.api "/me/events", (response) ->
#     if response and not response.error
#       i = 0
#       while i < response.data.length
#         $fbEvent = $("<div>")
#         $fbEvent.addClass "fb-event-item"
#         $fbEvent.text response.data[i].name
#         $fbEvent.attr "data-facebook-id", response.data[i].id
#         $("body").append $fbEvent
#         i++

# getFacebookEventInfo = (eventId) ->
#   FB.api "/" + eventId, (response) ->
#     if response and not response.error
#       console.log(response)

getFacebookPicture = (fbResponse) ->
  $.ajax
    url: "http://graph.facebook.com/" + fbResponse.id + "/picture?type=large&redirect=false&width=400&height=400"
    type: 'GET'
    success: (response) =>

      $aTag = $('<a>').addClass('image-wrapper')

      $('<div>')
      .addClass('image-text')
      .addClass('invisible')
      .html("<h1>#{fbResponse.name}</h1>")
      .appendTo($aTag)

      $('<img>')
      .attr('src', response.data.url)
      .addClass('attendee')
      .appendTo($aTag)

      names = []
      names.push(randName())
      names.push(randName())
      names.push(randName())

      realNamePos = randPos()
      nameSpacer = fbResponse.name.indexOf(' ')
      firstName = fbResponse.name.slice(0, nameSpacer)
      names[realNamePos-1] = firstName

      if realNamePos == 1
        $subtext = $("<span>")
        .html("<h3 data-is-real=\"true\">#{names[0]}</h3> | <h3 data-is-real=\"false\">#{names[1]}</h3> | <h3 data-is-real=\"false\">#{names[2]}</h3>")
      else if realNamePos == 2
        $subtext = $('<span>')
        .html("<h3 data-is-real=\"false\">#{names[0]}</h3> | <h3 data-is-real=\"true\">#{names[1]}</h3> | <h3 data-is-real=\"false\">#{names[2]}</h3>")
      else if realNamePos == 3
        $subtext = $('<span>')
        .html("<h3 data-is-real=\"false\">#{names[0]}</h3> | <h3 data-is-real=\"false\">#{names[1]}</h3> | <h3 data-is-real=\"true\">#{names[2]}</h3>")

      $subtext.addClass('image-subtext')
      .data('real-name', fbResponse.name)
      .data('tries', 0)
      .appendTo($aTag)

      $('.event-container').append($aTag)



getFacebookEventAttendees = (eventId) ->
  FB.api "/" + eventId + '/attending', (peepResponse) ->
    console.log(peepResponse)
    if peepResponse and not peepResponse.error
      for i in [0...peepResponse.data.length]
        getFacebookPicture(peepResponse.data[i])

setRSVP = (eventId, RSVPstatus) ->
  FB.api "/#{eventId}/#{RSVPstatus}", 'post', (response) ->
    if response == true
      $('.container').fadeOut(1000)
      window.location = "/"

setRSVP = (eventId, RSVPstatus) ->
  FB.api "/#{eventId}/#{RSVPstatus}", 'post', (response) ->
    if response == true
      $('.container').fadeOut(1000)
      window.location = "/"

getFbEventInfo = (eventId) ->
  FB.api "/" + eventId, (response) ->
    if response and not response.error
      console.log(response)
      $eventDetails = response.description
      $infoDiv = $('<div>').addClass('intro-text').html($eventDetails)
      $('.event-container').append($infoDiv)
      $addy = response.venue.street+" "+response.venue.state+" "+response.venue.zip
      $infoDiv = $('<div>').addClass('intro-text be-mappable').html($addy)
      $('.event-container').append($infoDiv)

jQuery ->

  $('body').prepend('<div id="fb-root"></div>')

  ((d, s, id) ->
    js = undefined
    fjs = d.getElementsByTagName(s)[0]
    return  if d.getElementById(id)
    js = d.createElement(s)
    js.id = id
    js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=" + fbKey
    fjs.parentNode.insertBefore js, fjs
  ) document, "script", "facebook-jssdk"

  $.ajax
    url: "#{window.location.protocol}//connect.facebook.net/en_US/all.js"
    dataType: 'script'
    cache: true

    window.fbAsyncInit = ->

      $('body').on 'click', '.fb-sign-in', (e) ->
        e.preventDefault()
        if navigator.userAgent.match('CriOS')
          window.location = "https://www.facebook.com/dialog/oauth?client_id=#{fbKey}&redirect_uri=#{redirectUri}"
        else
          FB.login ((response) ->
            <%# requesting scope http://stackoverflow.com/a/12663627/2474735 %>
            window.location = '/auth/facebook/callback' + '?' + $.param({ signed_request: response.authResponse.signedRequest }) if response.authResponse), scope: "email, user_birthday, user_likes, user_location, user_events, rsvp_event"

      $('body').on 'click', '.fb-sign-out', (e) ->
        FB.getLoginStatus (response) ->
          if response.authResponse
            FB.logout()
            # $('.fb-select-container').html('')
            $(".fb-select-container").fadeOut 500, (e) ->
                $(".fb-select-container").html ""
                return
            window.location = '/signout'
        true




# Started GET "/TravelingTypewriter.ttf" for 127.0.0.1 at 2014-03-13 23:46:28 -0400

# ActionController::RoutingError (No route matches [GET] "/TravelingTypewriter.ttf"):
#   actionpack (3.2.14) lib/action_dispatch/middleware/debug_exceptions.rb:21:in `call'
#   actionpack (3.2.14) lib/action_dispatch/middleware/show_exceptions.rb:56:in `call'
#   railties (3.2.14) lib/rails/rack/logger.rb:32:in `call_app'
#   railties (3.2.14) lib/rails/rack/logger.rb:16:in `block in call'
#   activesupport (3.2.14) lib/active_support/tagged_logging.rb:22:in `tagged'
#   railties (3.2.14) lib/rails/rack/logger.rb:16:in `call'
#   quiet_assets (1.0.2) lib/quiet_assets.rb:18:in `call_with_quiet_assets'
#   actionpack (3.2.14) lib/action_dispatch/middleware/request_id.rb:22:in `call'
#   rack (1.4.5) lib/rack/methodoverride.rb:21:in `call'
#   rack (1.4.5) lib/rack/runtime.rb:17:in `call'
#   activesupport (3.2.14) lib/active_support/cache/strategy/local_cache.rb:72:in `call'
#   rack (1.4.5) lib/rack/lock.rb:15:in `call'
#   railties (3.2.14) lib/rails/engine.rb:484:in `call'
#   railties (3.2.14) lib/rails/application.rb:231:in `call'
#   rack (1.4.5) lib/rack/content_length.rb:14:in `call'
#   railties (3.2.14) lib/rails/rack/log_tailer.rb:17:in `call'
#   rack (1.4.5) lib/rack/handler/webrick.rb:59:in `service'
#   /Users/ML/.rbenv/versions/1.9.3-p448/lib/ruby/1.9.1/webrick/httpserver.rb:138:in `service'
#   /Users/ML/.rbenv/versions/1.9.3-p448/lib/ruby/1.9.1/webrick/httpserver.rb:94:in `run'
#   /Users/ML/.rbenv/versions/1.9.3-p448/lib/ruby/1.9.1/webrick/server.rb:191:in `block in start_thread'


#   Rendered /Users/ML/.rbenv/versions/1.9.3-p448/lib/ruby/gems/1.9.1/gems/actionpack-3.2.14/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (1.5ms)




      $('.events-selector').on 'change', (e) ->
        $('.event-container').html('')
        eventId = $('.events-selector').find(":selected").val()
        getFacebookEventAttendees(eventId)
        getFbEventInfo(eventId)

      $('.events-invited-selector').on 'change', (e) ->
        $('.event-container').html('')
        eventId = $('.events-invited-selector').find(":selected").val()
        getFacebookEventAttendees(eventId)

      $('.change-rsvp-selector').on 'change', (e) ->
        RSVPstatus = $(this).val()
        eventId = $('.events-selector').val()
        setRSVP(eventId, RSVPstatus)

      $('.set-rsvp-selector').on 'change', (e) ->
        RSVPstatus = $(this).val()
        eventId = $('.events-invited-selector').val()
        setRSVP(eventId, RSVPstatus)
